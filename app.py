# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fnZlqSI530ZOr7srNWudnNELjHG5PkNJ
"""

import warnings
warnings.filterwarnings("ignore", message="missing ScriptRunContext")

!pip install scikit-learn

"""Importing Libraries"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor
from sklearn.neural_network import MLPRegressor
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt
import time
import streamlit as st
import pickle

from google.colab import files
uploaded = files.upload()
df = pd.read_csv("air quality.csv",encoding='ISO-8859-1')

"""Data Preprocessing and Feature Engineering"""

# Convert 'From Date' and 'To Date' to datetime format
df['From Date'] = pd.to_datetime(df['From Date'])
df['To Date'] = pd.to_datetime(df['To Date'])

# Extract features from 'From Date'
df['Hour'] = df['From Date'].dt.hour
df['DayOfWeek'] = df['From Date'].dt.dayofweek
df['Month'] = df['From Date'].dt.month
df['Year'] = df['From Date'].dt.year

# Calculate time difference in hours
df['TimeDifference_hours'] = (df['To Date'] - df['From Date']).dt.total_seconds() / 3600

# Define AQI calculation function
def calculate_aqi(row):
    pm25 = row['PM2.5 (ug/m3)']
    pm10 = row['PM10 (ug/m3)']
    no2 = row['NO2 (ug/m3)']
    co = row['CO (mg/m3)']
    o3 = row['Ozone (ug/m3)']

    aqi_values = []

    # Calculate AQI for each pollutant
    if 0 <= pm25 <= 12:
        aqi_pm25 = (50/12) * pm25
    elif 12 < pm25 <= 35.4:
        aqi_pm25 = ((100-50) / (35.4 - 12.1)) * (pm25 - 12.1) + 50
    elif 35.4 < pm25 <= 55.4:
        aqi_pm25 = ((200-100) / (55.4 - 35.5)) * (pm25 - 35.5) + 100
    elif 55.4 < pm25 <= 150.4:
        aqi_pm25 = ((300-200) / (150.4 - 55.5)) * (pm25 - 55.5) + 200
    elif 150.4 < pm25 <= 250.4:
        aqi_pm25 = ((400-300) / (250.4 - 150.5)) * (pm25 - 150.5) + 300
    elif pm25 > 250.4:
        aqi_pm25 = ((500-400) / (350.4 - 250.5)) * (pm25 - 250.5) + 400
    else:
        aqi_pm25 = 0

    aqi_values.append(aqi_pm25)

    if 0 <= pm10 <= 54:
        aqi_pm10 = (50/54) * pm10
    elif 54 < pm10 <= 154:
        aqi_pm10 = ((100-50) / (154 - 55)) * (pm10 - 55) + 50
    elif 154 < pm10 <= 254:
        aqi_pm10 = ((200-100) / (254 - 155)) * (pm10 - 155) + 100
    elif 254 < pm10 <= 354:
        aqi_pm10 = ((300-200) / (354 - 255)) * (pm10 - 255) + 200
    elif 354 < pm10 <= 424:
        aqi_pm10 = ((400-300) / (424 - 355)) * (pm10 - 355) + 300
    elif pm10 > 424:
        aqi_pm10 = ((500-400) / (504 - 425)) * (pm10 - 425) + 400
    else:
        aqi_pm10 = 0

    aqi_values.append(aqi_pm10)

    if 0 <= no2 <= 40:
        aqi_no2 = (50/40) * no2
    elif 40 < no2 <= 80:
        aqi_no2 = ((100-50) / (80 - 41)) * (no2 - 41) + 50
    elif 80 < no2 <= 180:
        aqi_no2 = ((200-100) / (180 - 81)) * (no2 - 81) + 100
    elif 180 < no2 <= 280:
        aqi_no2 = ((300-200) / (280 - 181)) * (no2 - 181) + 200
    elif 280 < no2 <= 400:
        aqi_no2 = ((400-300) / (400 - 281)) * (no2 - 281) + 300
    elif no2 > 400:
        aqi_no2 = ((500-400) / (500 - 401)) * (no2 - 401) + 400
    else:
        aqi_no2 = 0

    aqi_values.append(aqi_no2)

    if 0 <= co <= 4.4:
        aqi_co = (50/4.4) * co
    elif 4.4 < co <= 12.4:
        aqi_co = ((100-50) / (12.4 - 4.5)) * (co - 4.5) + 50
    elif 12.4 < co <= 22.4:
        aqi_co = ((200-100) / (22.4 - 12.5)) * (co - 12.5) + 100
    elif 22.4 < co <= 30.4:
        aqi_co = ((300-200) / (30.4 - 22.5)) * (co - 22.5) + 200
    elif 30.4 < co <= 40.4:
        aqi_co = ((400-300) / (40.4 - 30.5)) * (co - 30.5) + 300
    elif co > 40.4:
        aqi_co = ((500-400) / (50.4 - 40.5)) * (co - 40.5) + 400
    else:
        aqi_co = 0

    aqi_values.append(aqi_co)

    if 0 <= o3 <= 50:
        aqi_o3 = (50/50) * o3
    elif 50 < o3 <= 100:
        aqi_o3 = ((100-50) / (100 - 51)) * (o3 - 51) + 50
    elif 100 < o3 <= 168:
        aqi_o3 = ((200-100) / (168 - 101)) * (o3 - 101) + 100
    elif 168 < o3 <= 208:
        aqi_o3 = ((300-200) / (208 - 169)) * (o3 - 169) + 200
    elif 208 < o3 <= 748:
        aqi_o3 = ((400-300) / (748 - 209)) * (o3 - 209) + 300
    elif o3 > 748:
        aqi_o3 = ((500-400) / (1000 - 749)) * (o3 - 749) + 400
    else:
        aqi_o3 = 0

    aqi_values.append(aqi_o3)

    return max(aqi_values)

# Apply the function to calculate AQI
df['AQI'] = df.apply(calculate_aqi, axis=1)

# Basic data cleaning (handle missing values - using mean imputation for numerical columns)
for col in df.columns:
    if df[col].dtype in ['int64', 'float64']:
        df[col] = df[col].fillna(df[col].mean())

# Select features (X) - Ensure these are the same features used for training
features = ['PM2.5 (ug/m3)', 'PM10 (ug/m3)', 'NO2 (ug/m3)', 'CO (mg/m3)', 'Ozone (ug/m3)',
            'Hour', 'DayOfWeek', 'Month', 'Year', 'TimeDifference_hours']
X = df[features]

# Train the scaler on the entire dataset (for deployment consistency)
scaler = StandardScaler()
scaler.fit(X)

# Train the model on the entire dataset
model = RandomForestRegressor(n_estimators=100, random_state=42) # Or your best model
model.fit(scaler.transform(X), df['AQI']) # Scale the features before training

"""Streamlit App"""

st.title('Air Quality Index (AQI) Prediction')

st.write('Enter the following air quality parameters to predict the AQI:')

# Input fields
pm25 = st.number_input('PM2.5 (ug/m3)', value=25.0)
pm10 = st.number_input('PM10 (ug/m3)', value=50.0)
no2 = st.number_input('NO2 (ug/m3)', value=30.0)
co = st.number_input('CO (mg/m3)', value=0.5)
ozone = st.number_input('Ozone (ug/m3)', value=40.0)
hour = st.slider('Hour of the day', 0, 23, 12)
dayofweek = st.slider('Day of the week (0: Mon, 6: Sun)', 0, 6, 3)
month = st.slider('Month', 1, 12, 6)
year = st.number_input('Year', value=2025, step=1) # Ensure a plausible year
time_diff = st.number_input('Time Difference (hours)', value=1.0)

# Create input dataframe
input_data = pd.DataFrame({
    'PM2.5 (ug/m3)': [pm25],
    'PM10 (ug/m3)': [pm10],
    'NO2 (ug/m3)': [no2],
    'CO (mg/m3)': [co],
    'Ozone (ug/m3)': [ozone],
    'Hour': [hour],
    'DayOfWeek': [dayofweek],
    'Month': [month],
    'Year': [year],
    'TimeDifference_hours': [time_diff]
})

# Scale the input data
scaled_input_data = scaler.transform(input_data)

# Make prediction
if st.button('Predict AQI'):
    prediction = model.predict(scaled_input_data)
    st.success(f'Predicted AQI: {prediction[0]:.2f}')

"""Deployment"""

st.sidebar.header('Deployment Information')
st.sidebar.subheader('Deployment Method:')
st.sidebar.info('Streamlit Cloud')
st.sidebar.subheader('Public Link:')
st.sidebar.info('[Your Streamlit Cloud App Link]')

st.sidebar.subheader('UI Screenshot:')
st.sidebar.info('Please include a screenshot of the deployed application UI in your report.')

st.sidebar.subheader('Sample Prediction Output:')
st.sidebar.info('Example: PM2.5=25, PM10=50, NO2=30, CO=0.5, Ozone=40, Hour=10, Day=2, Month=7, Year=2025, TimeDiff=1.0 -> AQI=...')